# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build Packages

on:
  release:
    types: [published]
  push:
    tags:        
      - v*
    branches: [ master, build]
  pull_request:
    branches: [ master ]
  # # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

jobs:
  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ARCH: ['x86_64']
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2

      - name: Test
        run: |
          echo "$UID, $GID"

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=name::$name"
         
      - name: Build
        run: |
          export ACTION_MODE=true
          export DOCKER_UID=$UID
          export DOCKER_GID=$GID
          ls -l
          docker-compose up

      - name: View Directory
        run: |
          ls -l

      - name: Upload artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: deepin-music-${{ matrix.ARCH }}.src
          path: build/deepin-music.AppImage

  upload:
    name: Create release and upload artifacts
    needs:
      - build-appimage
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR

      - name: Generate TAG
        id: Tag
        run: |
          tag='continuous'
          name='Continuous Build'
          if [ 'true' == ${{ startsWith(github.ref, 'refs/tags/') }} ];then
            tag='${{ github.ref_name }}'
            name='${{ github.ref_name }}'
          fi
          echo "tag result: $tag - $name"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=name::$name"

      - name: Create release and upload artifacts
        if: startsWith(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
          chmod +x pyuploadtool-x86_64.AppImage
          ./pyuploadtool-x86_64.AppImage **build/*.AppImage

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          name: ${{ steps.tag.outputs.name }}
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            **build/*.AppImage